// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Simple Auth API
 *
 * A RESTful API service that handles user authentication including signup, signin, and password reset functionality.
 *
 * API version: 1.0.0
 * Contact: support@example.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AuthenticationAPIController binds http requests to an api service and writes the service results to the http response
type AuthenticationAPIController struct {
	service AuthenticationAPIServicer
	errorHandler ErrorHandler
}

// AuthenticationAPIOption for how the controller is set up.
type AuthenticationAPIOption func(*AuthenticationAPIController)

// WithAuthenticationAPIErrorHandler inject ErrorHandler into controller
func WithAuthenticationAPIErrorHandler(h ErrorHandler) AuthenticationAPIOption {
	return func(c *AuthenticationAPIController) {
		c.errorHandler = h
	}
}

// NewAuthenticationAPIController creates a default api controller
func NewAuthenticationAPIController(s AuthenticationAPIServicer, opts ...AuthenticationAPIOption) *AuthenticationAPIController {
	controller := &AuthenticationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthenticationAPIController
func (c *AuthenticationAPIController) Routes() Routes {
	return Routes{
		"SignupPost": Route{
			"SignupPost",
			strings.ToUpper("Post"),
			"/signup",
			c.SignupPost,
		},
		"SigninPost": Route{
			"SigninPost",
			strings.ToUpper("Post"),
			"/signin",
			c.SigninPost,
		},
		"ResetPasswordPost": Route{
			"ResetPasswordPost",
			strings.ToUpper("Post"),
			"/reset-password",
			c.ResetPasswordPost,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the AuthenticationAPIController
func (c *AuthenticationAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"SignupPost",
			strings.ToUpper("Post"),
			"/signup",
			c.SignupPost,
		},
		Route{
			"SigninPost",
			strings.ToUpper("Post"),
			"/signin",
			c.SigninPost,
		},
		Route{
			"ResetPasswordPost",
			strings.ToUpper("Post"),
			"/reset-password",
			c.ResetPasswordPost,
		},
	}
}



// SignupPost - User sign up
func (c *AuthenticationAPIController) SignupPost(w http.ResponseWriter, r *http.Request) {
	var signupPostRequestParam SignupPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&signupPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSignupPostRequestRequired(signupPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSignupPostRequestConstraints(signupPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SignupPost(r.Context(), signupPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SigninPost - User sign in
func (c *AuthenticationAPIController) SigninPost(w http.ResponseWriter, r *http.Request) {
	var signinPostRequestParam SigninPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&signinPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSigninPostRequestRequired(signinPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSigninPostRequestConstraints(signinPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SigninPost(r.Context(), signinPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetPasswordPost - Reset user password
func (c *AuthenticationAPIController) ResetPasswordPost(w http.ResponseWriter, r *http.Request) {
	var resetPasswordPostRequestParam ResetPasswordPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&resetPasswordPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertResetPasswordPostRequestRequired(resetPasswordPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertResetPasswordPostRequestConstraints(resetPasswordPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ResetPasswordPost(r.Context(), resetPasswordPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
